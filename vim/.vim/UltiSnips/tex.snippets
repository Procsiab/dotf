# Add context to snippets

global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal

# Snippets list

snippet bxx "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

snippet cpp "Chapter" w
\chapter{$1}
	$0
endsnippet

snippet snn "Section" w
\section{$1}
	$0
endsnippet

snippet ssnn "Sub-section" w
\subsection{$1}
	$0
endsnippet

snippet lbl "\label{}" iA
\label{$1}$0
endsnippet

snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet enum "Enumerate" w
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" w
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

context "math()"
snippet case "Cases" w
\begin{cases}
	${1:1} & \text{se $${2:x = 1}$;} \\\\
	${3:0} & \text{se $${4:x = 0}$.}
\end{cases}$0
endsnippet

context "math()"
snippet matr "Matrix [2x2]" w
\begin{bmatrix}
	${1:1} & ${2:2} \\\\
	${3:3} & ${4:4}
\end{bmatrix}$0
endsnippet

context "math()"
snippet mattr "Matrix [3x3]" w
\begin{bmatrix}
	${1:1} & ${2:2} & ${3:3} \\\\
	${4:4} & ${5:5} & ${6:6} \\\\
	${7:7} & ${8:8} & ${9:9}
\end{bmatrix}$0
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ';', ':']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet -> "\rightarrow" Ai
\rightarrow
endsnippet

context "math()"
snippet <- "\leftarrow" Ai
\leftarrow
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

context "math()"
snippet fnz "Function" iA
$1\,:\, $2 \mapsto $3
endsnippet

context "math()"
snippet scst "\scriptstyle" iA
\scriptstyle ${1:${VISUAL}} \textstyle$0
endsnippet

context "math()"
snippet scsst "\scriptscriptstyle" iA
\scriptscriptstyle ${1:${VISUAL}} \textstyle$0
endsnippet

context "math()"
snippet mbb "Math blackboard" iA
\mathbb{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet mbf "Math bold" iA
\mathbf{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet mcl "Math callig" iA
\mathcal{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet msc "Math script" iA
\mathscr{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet txt "Math text" iA
\text{${1:${VISUAL}}}$0
endsnippet

snippet ttt "Text monospaced" iA
\texttt{${1:${VISUAL}}}$0
endsnippet

snippet eee "Text emphasis" iA
\emph{${1:${VISUAL}}}$0
endsnippet

snippet uuu "Text underline" iA
\underline{${1:${VISUAL}}}$0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet

snippet defn "Definition" bA
\begin{defn}
	${1:${VISUAL}}
\end{defn}
endsnippet

snippet prty "Property" bA
\begin{prty}
	${1:${VISUAL}}
\end{prty}
endsnippet

snippet obsv "Observation" bA
\begin{obsv}
	${1:${VISUAL}}
\end{obsv}
endsnippet

snippet eqn "Equation" bA
\begin{equation}
	${1:${VISUAL}}
.\end{equation}
endsnippet

snippet thm "Theorem" bA
\begin{thm}
	${1:${VISUAL}}
\end{thm}
endsnippet

snippet prf "Proof" bA
\begin{proof}
	${1:${VISUAL}}
\end{proof}
endsnippet

snippet note "note" bA
\begin{note}
	${1:${VISUAL}}
\end{note}
endsnippet

snippet -- "\nbdash (custom cmd)" iA
\nbdash 
endsnippet

context "math()"
snippet ccc "cancel" iA
\cancel{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet "" "(...)" iA
\`\`${1:${VISUAL}}''$0
endsnippet

snippet () "(...)" iA
(${1:${VISUAL}})$0
endsnippet

snippet [] "[...]" iA
[${1:${VISUAL}}]$0
endsnippet

context "math()"
snippet {} "Math {...}" iA
\\{${1:${VISUAL}}\\}$0
endsnippet

snippet {} "LaTeX {...}" iA
{${1:${VISUAL}}}$0
endsnippet

snippet || "LaTeX |...|" iA
|${1:${VISUAL}}|$0
endsnippet

context "math()"
snippet lr( "left( right)" i
\left(${1:${VISUAL}}\right)$0
endsnippet

context "math()"
snippet lr| "left| right|" i
\left|${1:${VISUAL}}\right|$0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" i
\left\\{${1:${VISUAL}}\right\\}$0
endsnippet

context "math()"
snippet lrb "left\{ right\}" i
\left\\{${1:${VISUAL}}\right\\}$0
endsnippet

context "math()"
snippet lr[ "left[ right]" i
\left[${1:${VISUAL}}\right]$0
endsnippet

context "math()"
snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}}\right>$0
endsnippet

context "math()"
snippet usub "underset & underbrace" i
\underset{$2}{\underbrace{${1:${VISUAL}}}}$0
endsnippet

context "math()"
snippet osob "overset & overbrace" i
\overset{$2}{\overbrace{${1:${VISUAL}}}}$0
endsnippet

context "math()"
snippet int "integral" w
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}}\, d$4$0
endsnippet

context "math()"
snippet sum "sum" w
\sum_{i=${1:1}}^{${2:n}} ${3:X_i}
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet prod "product" w
\prod_{${1:i=${2:1}}}^{${3:n}} ${4:${VISUAL}}$0
endsnippet

context "math()"
snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}}$0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet cmp "complement" iA
^{\text{C}}
endsnippet

context "math()"
snippet trn "transpose" iA
^{\text{T}}
endsnippet

context "math()"
snippet cd "multiply dot" iA
\cdot
endsnippet

context "math()"
snippet ^^ "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet :: "_:_" iA
\,:\,$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ,, "comma with space" iA
,\,
endsnippet

snippet '' "\prime" iA
\prime
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet ... "\ldots" iA
\ldots
endsnippet

context "math()"
snippet vep "\varepsilon" iA
\varepsilon
endsnippet

context "math()"
snippet vph "\varphi" iA
\varphi
endsnippet

context "math()"
snippet vth "\vartheta" iA
\vartheta
endsnippet

context "math()"
snippet bls "\backlslash" iA
\backslash
endsnippet

context "math()"
snippet AA "\forall" iA
\forall 
endsnippet

context "math()"
snippet EE "\exist" iA
\exists 
endsnippet

context "math()"
snippet ~~ "\sim" iA
\sim 
endsnippet

context "math()"
snippet ~= "\simeq" iA
\simeq 
endsnippet

context "math()"
snippet := "\coloneqq" iA
\coloneqq 
endsnippet

context "math()"
snippet bnm "Binomial" iA
\\binom{$1}{$2}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

context "math()"
priority 10
snippet "tld" "\tilde" riA
\tilde{${1:${VISUAL}}}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])tld" "\tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "bar" "bar" riA
\bar{${1:${VISUAL}}}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "hat" "hat" riA
\hat{${1:${VISUAL}}}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

# Probability & statistics specific snippets

context "math()"
snippet prsp "Probability space" iA
(\Omega,\,\mathbb{F},\,P)$0
endsnippet

context "math()"
snippet vat "Expected value" wiA
\text{E}($1)$0
endsnippet

context "math()"
snippet var "Variance" wiA
\text{Var}($1)$0
endsnippet

context "math()"
snippet tvat "Expected value theta" wiA
\text{E}_{\vartheta}[$1]$0
endsnippet

context "math()"
snippet tvar "Variance theta" wiA
\text{Var}_{\vartheta}[$1]$0
endsnippet

context "math()"
snippet cov "Covariance" wiA
\text{Cov}($1)$0
endsnippet

context "math()"
snippet mse "Mean square error (d_n)" wiA
r_{${1:\vartheta}}(d_${2:n},\, k($1))$0
endsnippet

context "math()"
snippet MSE "Mean square error (MSE)" wiA
\scriptstyle\text{MSE}\textstyle_{${1:\vartheta}}(D_${2:n})$0
endsnippet

context "math()"
snippet iid "Indipendent identically distributed" iA
$1_1,\, \ldots,\, ${1:X}_\{${2:n}\}$0
endsnippet

context "math()"
snippet .., ", ..., " iA
,\, \ldots,\, 
endsnippet

# Network security specific snippets
context "math()"
snippet mod "modulus" iA
 \mod $1
endsnippet

context "math()"
snippet cgm "residue congruence" iA
\cgm{$1}{$2}{$3}$0
endsnippet
